[package]
name = "wasm-game-of-life-diamondlord"
version = "0.1.0"
authors = ["Diamondlord <vladimir.almazov@gmail.com>"]
edition = "2020"
readme = "README.md"
repository = "https://github.com/Diamondlord/wasm-game-of-life"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
#default = ["wee_alloc"]

[dependencies]
wasm-bindgen = "0.2"
js-sys = "0.3.37"
fixedbitset = "0.3.0"

[dependencies.web-sys]
version = "0.3"
features = [
  "console",
  "Window"
]
# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.1", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.2", optional = true }

[dev-dependencies]
wasm-bindgen-test = "0.2"

[profile.release]
#debug = true
#This gives LLVM many more opportunities to inline and prune functions.
#Not only will it make the .wasm smaller, but it will also make it faster at runtime!
#The downside is that compilation will take longer.
lto = true

# LLVM's optimization passes are tuned to improve speed, not size, by default. We can change the goal to code size by modifying the [profile.release] section in Cargo.toml to this:
 opt-level = "s"
# Or, to even more aggressively optimize for size, at further potential speed costs:
#opt-level = 'z'