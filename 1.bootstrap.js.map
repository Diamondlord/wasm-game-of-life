{"version":3,"sources":["webpack:///./src/index.js","webpack:///../pkg/wasm_game_of_life_diamondlord_bg.js","webpack:///(webpack)/buildin/harmony-module.js"],"names":["universe","new","width","height","setPntrToCells","cellsPtr","cells","Uint8Array","buffer","canvas","document","getElementById","playPauseButton","resetButton","killButton","speedButton","fpsButton","fpsInfo","speed","ctx","getContext","getIndex","row","column","drawCells","beginPath","fillStyle","col","idx","Alive","fillRect","Dead","stroke","animationId","play","textContent","renderLoop","pause","cancelAnimationFrame","addEventListener","event","fps","this","frames","lastFrameTimeStamp","performance","now","delta","push","length","shift","min","Infinity","max","sum","i","Math","mean","round","trim","render","tick","requestAnimationFrame","boundingRect","getBoundingClientRect","scaleX","scaleY","canvasLeft","clientX","left","canvasTop","clientY","top","floor","toggle_cell","reset_state","kill_cells","setTimeout","target","value","classList","toggle","strokeStyle","moveTo","lineTo","j","drawGrid","cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getStringFromWasm0","ptr","len","subarray","Cell","Object","freeze","Universe","obj","create","prototype","ret","__wrap","__wbg_random_5af91a0f7daf1188","random","what","Error","__wbindgen_throw","arg0","arg1","exports","originalModule","webpackPolyfill","children","defineProperty","enumerable","get","l"],"mappings":"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","file":"1.bootstrap.js","sourcesContent":["import { Universe, Cell } from \"wasm-game-of-life-diamondlord\";\n// Import the WebAssembly memory at the top of the file.\nimport { memory } from \"wasm-game-of-life-diamondlord/wasm_game_of_life_diamondlord_bg\";\n\nif (process.env.NODE_ENV !== 'production') {\n  console.log('Looks like we are in development mode!');\n}\n\nconst CELL_SIZE = 10; // px\nconst GRID_COLOR = \"#CCCCCC\";\nconst DEAD_COLOR = \"#FFFFFF\";\nconst ALIVE_COLOR = \"#000000\";\n\n// Construct the universe, and get its width and height.\nconst universe = Universe.new();\nlet width = universe.width();\nlet height = universe.height();\n\nconst setPntrToCells = () => {\n  const cellsPtr = universe.cells();\n  return new Uint8Array(memory.buffer, cellsPtr, width * height);\n};\n\nlet cells = setPntrToCells();\n\n// Give the canvas room for all of our cells and a 1px border\n// around each of them.\nconst canvas = document.getElementById(\"game-of-life-canvas\");\ncanvas.height = (CELL_SIZE + 1) * height + 1;\ncanvas.width = (CELL_SIZE + 1) * width + 1;\n\nconst playPauseButton = document.getElementById(\"play-pause\");\nconst resetButton = document.getElementById(\"reset\");\nconst killButton = document.getElementById(\"kill\");\nconst speedButton = document.getElementById(\"speed\");\nconst fpsButton = document.getElementById(\"fpsbtn\");\nconst fpsInfo = document.getElementById(\"fps\");\nlet speed = 1;\nconst ctx = canvas.getContext('2d');\n\nconst drawGrid = () => {\n  ctx.beginPath();\n  ctx.strokeStyle = GRID_COLOR;\n\n  // Vertical lines.\n  for (let i = 0; i <= width; i++) {\n    ctx.moveTo(i * (CELL_SIZE + 1) + 1, 0);\n    ctx.lineTo(i * (CELL_SIZE + 1) + 1, (CELL_SIZE + 1) * height + 1);\n  }\n\n  // Horizontal lines.\n  for (let j = 0; j <= height; j++) {\n    ctx.moveTo(0,                           j * (CELL_SIZE + 1) + 1);\n    ctx.lineTo((CELL_SIZE + 1) * width + 1, j * (CELL_SIZE + 1) + 1);\n  }\n\n  ctx.stroke();\n};\n\nconst getIndex = (row, column) => {\n  return row * width + column;\n};\n\nconst drawCells = () => {\n  ctx.beginPath();\n\n// Alive cells.\n  ctx.fillStyle = ALIVE_COLOR;\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const idx = getIndex(row, col);\n      if (cells[idx] !== Cell.Alive) {\n        continue;\n      }\n\n      ctx.fillRect(\n        col * (CELL_SIZE + 1) + 1,\n        row * (CELL_SIZE + 1) + 1,\n        CELL_SIZE,\n        CELL_SIZE\n      );\n    }\n  }\n\n// Dead cells.\n  ctx.fillStyle = DEAD_COLOR;\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const idx = getIndex(row, col);\n      if (cells[idx] !== Cell.Dead) {\n        continue;\n      }\n\n      ctx.fillRect(\n        col * (CELL_SIZE + 1) + 1,\n        row * (CELL_SIZE + 1) + 1,\n        CELL_SIZE,\n        CELL_SIZE\n      );\n    }\n  }\n\n  ctx.stroke();\n};\n\nlet animationId = null;\n\nconst isPaused = () => {\n  return animationId === null;\n};\n\nconst play = () => {\n  playPauseButton.textContent = \"Pause\";\n  renderLoop();\n};\n\nconst pause = () => {\n  playPauseButton.textContent = \"Play\";\n  cancelAnimationFrame(animationId);\n  animationId = null;\n  drawCells();\n};\n\nplayPauseButton.addEventListener(\"click\", event => {\n  if (isPaused()) {\n    play();\n  } else {\n    pause();\n  }\n});\n\nconst fps = new class {\n  constructor() {\n    this.fps = document.getElementById(\"fps\");\n    this.frames = [];\n    this.lastFrameTimeStamp = performance.now();\n  }\n\n  render() {\n    // Convert the delta time since the last frame render into a measure\n    // of frames per second.\n    const now = performance.now();\n    const delta = now - this.lastFrameTimeStamp;\n    this.lastFrameTimeStamp = now;\n    const fps = 1 / delta * 1000;\n\n    // Save only the latest 100 timings.\n    this.frames.push(fps);\n    if (this.frames.length > 100) {\n      this.frames.shift();\n    }\n\n    // Find the max, min, and mean of our 100 latest timings.\n    let min = Infinity;\n    let max = -Infinity;\n    let sum = 0;\n    for (let i = 0; i < this.frames.length; i++) {\n      sum += this.frames[i];\n      min = Math.min(this.frames[i], min);\n      max = Math.max(this.frames[i], max);\n    }\n    let mean = sum / this.frames.length;\n\n    // Render the statistics.\n    this.fps.textContent = `\nFrames per Second:\n         latest = ${Math.round(fps)}\navg of last 100 = ${Math.round(mean)}\nmin of last 100 = ${Math.round(min)}\nmax of last 100 = ${Math.round(max)}\n`.trim();\n  }\n};\n\nconst renderLoop = () => {\n  // debugger;\n  fps.render();\n  drawCells();\n  for (let i = 0; i < speed; i++) {\n    universe.tick();\n  }\n  animationId = requestAnimationFrame(renderLoop);\n};\n\ncanvas.addEventListener(\"click\", event => {\n  pause();\n  const boundingRect = canvas.getBoundingClientRect();\n\n  const scaleX = canvas.width / boundingRect.width;\n  const scaleY = canvas.height / boundingRect.height;\n\n  const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\n  const canvasTop = (event.clientY - boundingRect.top) * scaleY;\n\n  const row = Math.min(Math.floor(canvasTop / (CELL_SIZE + 1)), height - 1);\n  const col = Math.min(Math.floor(canvasLeft / (CELL_SIZE + 1)), width - 1);\n\n  universe.toggle_cell(row, col);\n  drawCells();\n});\n\nresetButton.addEventListener(\"click\", event => {\n  universe.reset_state();\n  drawCells();\n  cells = setPntrToCells();\n});\n\nkillButton.addEventListener(\"click\", event => {\n  universe.kill_cells();\n  cells = setPntrToCells();\n  drawCells();\n  setTimeout(pause, 100);\n});\n\nspeedButton.addEventListener(\"input\", event => {\n  speed = event.target.value;\n});\n\nfpsButton.addEventListener(\"click\", event => {\n  fpsInfo.classList.toggle(\"hidden\");\n});\n\ndrawGrid();\nplay();","import * as wasm from './wasm_game_of_life_diamondlord_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction notDefined(what) { return () => { throw new Error(`${what} is not defined`); }; }\n/**\n*/\nexport const Cell = Object.freeze({ Dead:0,\"0\":\"Dead\",Alive:1,\"1\":\"Alive\", });\n/**\n*/\nexport class Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_universe_free(ptr);\n    }\n    /**\n    */\n    tick() {\n        wasm.universe_tick(this.ptr);\n    }\n    /**\n    * @param {number} row\n    * @param {number} column\n    */\n    toggle_cell(row, column) {\n        wasm.universe_toggle_cell(this.ptr, row, column);\n    }\n    /**\n    * @returns {Universe}\n    */\n    static new() {\n        var ret = wasm.universe_new();\n        return Universe.__wrap(ret);\n    }\n    /**\n    */\n    reset_state() {\n        wasm.universe_reset_state(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        var ret = wasm.universe_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        var ret = wasm.universe_height(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    cells() {\n        var ret = wasm.universe_cells(this.ptr);\n        return ret;\n    }\n    /**\n    * Set the width of the universe.\n    *\n    * Resets all cells to the dead state.\n    * @param {number} width\n    */\n    set_width(width) {\n        wasm.universe_set_width(this.ptr, width);\n    }\n    /**\n    * Set the height of the universe.\n    *\n    * Resets all cells to the dead state.\n    * @param {number} height\n    */\n    set_height(height) {\n        wasm.universe_set_height(this.ptr, height);\n    }\n    /**\n    */\n    kill_cells() {\n        wasm.universe_kill_cells(this.ptr);\n    }\n}\n\nexport const __wbg_random_5af91a0f7daf1188 = typeof Math.random == 'function' ? Math.random : notDefined('Math.random');\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}